Lab 3 : Genetic Coding in OCaml
===============================
(Deadline : 14th Oct 2015)

One of the amazing scientific discovery of the century is that
inherited characteristic of all Earth's life-forms can be encoded 
in DNA by surprisingly simple sequences of just four chemical
compounds, called bases. Furthermore, biochemists have been able to 
decipher large parts of this code, and can now reliably decsribe
large parts of the genotype of many living things by listing 
appropriate sequences of bases.

The four bases that make up DNA are guanine (G), adenine (A), 
cytosine (C), and thymine (T). A gene is a long string of 
(typically several thousand of) these bases. The presence or
absence of particular bases, and their order, are significant.

A small but important tool in cracking the genetic code is the determination of how similar two different sequences are.
One metric for determining similarity is described in Cormen, Leiserson,
Rivest, and Stein (Problem 15-3). Each of the two sequences being
compared (x and y) is modified by inserting spaces at arbitrary
locations (including at either end) so that the resulting sequences
(x0 and y0) are of the same length k but do not have a space in the
same position (i.e. for no position j are both x0[j] and y0[j] a space).
Then we assign an integer score to each position j:

 sc(j) = +1 if x0[j] = y0[j]
       = -1 if x0[j] != y0[j], and neither is a space
       = -2 if either x0[j] or y0[j] is a space.

The score for an alignment is the sum of the scores over 
all positions: sum_{j=1 to k} sc(j). 

The aim is to find an alignment that maximizes the total score.
For example, given sequences x = GATCGGCAT and y = CAATGTGAATC,
three different alignments (and their scores) are:

G ATCG GCAT       GA TC GG  CAT       GATCGGCA T
CAAT GTGAATC      CAATGTGAATC         CAATGTGAATC
-*++*+*+-++* (-4) -+*+-*+-**+** (-11) -+--+--+*-* (-7)

A + under a position indicates a score of +1 for that position,
a - indicates a score of -1, and a * indicates a score of -2; so 
the first alignment shown has a total score of 
    (6x1)+(2x-1)+(4x-2) = -4

Among these three, the first one is the best alignment.

However, there is a better solution with score (-1); and this 
is indicated by the following outcomes:

# align "GATCGGCAT" "CAATGTGAATC";;
- : int * (string * string) list =
 (-3,
 [(" GATCGGCAT ", "CAATGTGAATC"); ("G ATCGGCAT ", "CAATGTGAATC");
  ("GA TCGGCAT ", "CAATGTGAATC"); ("GATCG GCAT ", "CAATGTGAATC")])

A stub code is given to you. You may use this as your starting
point, where the align method would just return just the score first.
Generalise your method, so that it would now return
the two aligned strings with suitable spaces added.

Tasks
=====
1. Using Ocaml, write a recursive procedure that would
   compute one best alignment between two sequences
   (given as strings). If there are more than one answers, choose
   any one answer and print your solution as follows:

    GATCGGCAT 
   CAATGTGAATC
   *-++--+-++*
   Score : -3

2. Generalize your method so that you can give a different penalty
   to space. For example, if (-1) were to be given as penalty
   for the addition of a space, you will have the following 
   possible best alignments.

   # align_w_penalty "GATCGGCAT" "CAATGTGAATC" (-1);;
   - : int * (string * string) list =
   (0, [(" GATCG GCAT ", "CAAT GTGAATC"); ("G ATCG GCAT ", "CAAT GTGAATC");
        ("GA TCG GCAT ", "CAAT GTGAATC")])

   Remember that you are to return one solution, and to
   print the chosen solution as:

    GATCG GCAT 
   CAAT GTGAATC
   *-++*+*+-++*
   Score : 0


3. Using memoization, drastically improve the performance of
   your algorithm. Please use an OCaml object in your
   memoization solution, and make sure that the memo-table
   is completely enclosed within your align method.
